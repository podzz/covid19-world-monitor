{"version":3,"sources":["components/CounterBlock/CounterBlock.module.css","components/Sidebar/SidebarLeftList/SidebarLeftList.module.css","utils/color.js","components/Map/layers.js","components/Map/Map.js","components/CustomAreaChart/CustomAreaChart.js","components/SelectedCountryDialog/SelectedCountryDialog.js","components/CounterBlock/CounterBlock.js","components/Sidebar/SidebarLeftList/SidebarLeftList.js","components/Sidebar/SidebarSearch/SidebarSearch.js","components/Sidebar/SidebarLeft.js","components/Spinner/Spinner.js","redux/actions/mapCases.actions.js","redux/actions/mapPolygons.actions.js","redux/selectors/mapCases.selector.js","redux/selectors/mapPolygons.selector.js","utils/map-helper.js","containers/Layout/Layout.js","containers/Dashboard/Dashboard.js","App.js","redux/reducers/mapCases.reducer.js","redux/reducers/mapPolygons.reducer.js","redux/sagas/mapCases.saga.js","redux/sagas/mapPolygons.saga.js","redux/sagas/index.js","serviceWorker.js","index.js"],"names":["module","exports","clusterLayer","id","type","beforeId","source","layout","paint","Map","mapData","longitude","latitude","countrySelected","useState","zoom","viewport","setViewport","hoveredFeature","x","y","tooltip","setTooltip","_sourceRef","useRef","onViewportChange","useCallback","oldViewPort","goToViewport","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","useEffect","onHover","event","features","srcEvent","offsetX","offsetY","findState","filter","feature","properties","state","length","first","onClick","renderTooltip","stateOrCountry","name","shortName","county","region","Paper","className","style","left","top","lastCases","lastRecovered","lastDeaths","casePercentPopulation","lastGrowthFactor","width","height","mapStyle","mapboxApiAccessToken","process","interactiveLayerIds","data","ref","CustomAreaChart","dates","getInitialChart","setInitialChart","getDifferential","setDifferential","parsedDates","JSON","parse","Object","keys","reduce","result","key","push","date","differential","map","dateData","i","cases","deaths","Fragment","x1","y1","x2","y2","offset","stopColor","stopOpacity","strokeDasharray","dataKey","stroke","fillOpacity","fill","verticalAlign","stackId","useStyles","makeStyles","theme","appBar","position","title","marginLeft","spacing","flex","SelectedCountryDialog","selectedCountry","discardSelectedCountry","Transition","React","forwardRef","props","Slide","direction","classes","dialogContent","AppBar","Toolbar","Avatar","emoji","Typography","variant","IconButton","edge","color","aria-label","Dialog","fullScreen","open","onClose","TransitionComponent","CounterBlock","counter","text","CounterBlockClasses","Block","Counter","toString","replace","SidebarListItemRenderer","index","filteredCountries","setCoordinates","coordinates","ListItem","button","Grid","container","justify","alignItems","wrap","item","SidebarLeftListClasses","Flag","ListItemText","primary","secondary","SidebarLeftList","memo","itemSize","itemCount","itemData","search","setSearch","TextField","label","value","onChange","target","InputProps","startAdornment","InputAdornment","Header","padding","textAlign","backgroundColor","palette","background","default","List","paddingTop","flexGrow","SidebarLeft","countries","setFilteredCases","filteredCountry","toLowerCase","includes","sumBy","Divider","backdrop","zIndex","drawer","Spinner","Backdrop","CircularProgress","size","MapCasesActions","MapPolygonsActions","selectCountriesList","values","mapCases","selectCountriesMapByFeatureId","keyBy","selectCountriesOrderedByCases","orderBy","selectMapPolygons","mapPolygons","polygons","domainArray","colorsArray","inc","sort","d3scale","domain","range","interpolate","d3interpolate","getPolygonData","countriesMapByFeatureId","worstCountryPercentage","get","maxBy","affectedPercent","countryForFeature","root","display","breakpoints","up","flexShrink","menuButton","marginRight","toolbar","mixins","drawerPaper","content","Layout","leftSideBar","children","rightSidebar","mobileOpen","setMobileOpen","handleDrawerToggle","CssBaseline","Hidden","smUp","implementation","Drawer","anchor","elevation","paper","ModalProps","keepMounted","xsDown","Dashboard","dispatch","useDispatch","getCoordinates","getSelectedCountry","setSelectedCountry","getMapData","setMapData","useSelector","loading","isEmpty","country","onSelectCountry","App","useMemo","createMuiTheme","basename","ThemeProvider","initialState","error","getMapCasesSaga","fetch","response","json","countryId","population","iso1","split","lastTested","sortBy","dateObj","Date","forEach","tested","growthFactor","recovered","toFixed","put","message","getMapPolygonsSaga","watchMapCases","watchMapPolygons","all","takeEvery","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","sagaMiddleware","createSagaMiddleware","enhancers","applyMiddleware","thunk","store","createStore","combineReducers","action","run","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8609b226.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Counter\":\"CounterBlock_Counter__1eEwE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Flag\":\"SidebarLeftList_Flag__2aEY_\"};","import * as d3interpolate from \"d3-interpolate\";\nimport * as d3scale from \"d3-scale\";\n\nconst choroplethColor = \"magma\";\n\nexport const noCasesColor = \"rgba(0,0,0,0)\";\nexport const noPopulationDataColor = \"rgba(0,0,0,0)\";\n\nexport const outlineColorHighlight = \"rgb(255,255,255)\";\nexport const outlineColor = \"rgb(255,255,255)\";\n\nconst choroplethColors = {\n  stoplight: [\"#eeffcd\", \"#b4ffa5\", \"#ffff00\", \"#ff7f00\", \"#ff0000\"],\n  yellowOrangePurple: [\n    \"#fff5bd\",\n    \"#ffb500\",\n    \"#ff7e00\",\n    \"#f24b0d\",\n    \"#cd311f\",\n    \"#b10048\",\n    \"#7c0864\",\n    \"#4a185a\",\n    \"#2b123e\",\n    \"#140321\"\n  ],\n  yellowOrangeRed: [\n    \"#fff5bd\",\n    \"#fce289\",\n    \"#fcce54\",\n    \"#ffb601\",\n    \"#ff8f00\",\n    \"#fd6100\",\n    \"#e03d19\",\n    \"#b52725\",\n    \"#801f28\",\n    \"#4b1a21\"\n  ],\n  heat: [\n    \"#FFFFFF\",\n    \"#ffff5e\",\n    \"#ffe70c\",\n    \"#fead0a\",\n    \"#fd6f08\",\n    \"#fd2907\",\n    \"#fd0407\"\n  ],\n  peach: [\n    \"rgb(253,222,166)\",\n    \"rgb(255,188,134)\",\n    \"rgb(249,152,133)\",\n    \"rgb(232,110,129)\",\n    \"rgb(224,88,136)\"\n  ],\n  pink: [\n    \"rgb(255, 244, 221)\",\n    \"rgb(255, 221, 215)\",\n    \"rgb(255, 197, 210)\",\n    \"rgb(254, 174, 203)\",\n    \"rgb(250, 150, 196)\",\n    \"rgb(245, 126, 189)\",\n    \"rgb(239, 100, 181)\",\n    \"rgb(232, 70, 173)\",\n    \"rgb(210, 56, 161)\",\n    \"rgb(187, 46, 150)\",\n    \"rgb(163, 36, 140)\",\n    \"rgb(138, 27, 131)\",\n    \"rgb(113, 22, 124)\",\n    \"rgb(86, 15, 116)\",\n    \"rgb(55, 11, 110)\",\n    \"rgb(0, 9, 104)\"\n  ],\n  viridis: [\n    \"#fde725\",\n    \"#d8e219\",\n    \"#addc30\",\n    \"#84d44b\",\n    \"#5ec962\",\n    \"#3fbc73\",\n    \"#28ae80\",\n    \"#1fa088\",\n    \"#21918c\",\n    \"#26828e\",\n    \"#2c728e\",\n    \"#33638d\",\n    \"#3b528b\",\n    \"#424086\",\n    \"#472d7b\",\n    \"#48186a\"\n  ],\n  magma: [\n    \"#fcfdbf\",\n    \"#fde2a3\",\n    \"#fec488\",\n    \"#fea772\",\n    \"#fc8961\",\n    \"#f56b5c\",\n    \"#e75263\",\n    \"#d0416f\",\n    \"#b73779\",\n    \"#9c2e7f\",\n    \"#832681\",\n    \"#6a1c81\",\n    \"#51127c\",\n    \"#36106b\",\n    \"#1d1147\",\n    \"#0a0822\"\n  ]\n};\n\nlet domainArray = [];\nconst colorsArray = choroplethColors[choroplethColor];\n\n// Create domains array equal to number of colors\n// distribution of lightness/colors handled outside of this tool\nfor (let i = 0; i < colorsArray.length; i++) {\n  let inc;\n  if (i === 0) {\n    inc = 0;\n  } else {\n    inc = i / colorsArray.length;\n  }\n  domainArray.push(inc);\n}\ndomainArray = domainArray.sort();\n\nexport const fill = d3scale\n  .scaleLinear()\n  .domain(domainArray)\n  .range(colorsArray)\n  .interpolate(d3interpolate.interpolateHcl);\n\nfunction ramp(color, n, containerId) {\n  const base = document.getElementById(containerId);\n  const canvas = document.createElement(\"canvas\");\n  base.appendChild(canvas);\n  canvas.setAttribute(\"width\", `${n}px`);\n  canvas.setAttribute(\"height\", \"16px\");\n  const context = canvas.getContext(\"2d\");\n\n  canvas.style.width = `${n}px`;\n  canvas.style.height = \"16px\";\n  canvas.style.imageRendering = \"pixelated\";\n\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 32);\n  }\n  return canvas;\n}\n\nexport function getScaledColorValue(affectedPercent, worstAffectedPercent) {\n  const percentRatio = (affectedPercent / worstAffectedPercent) * 3;\n\n  return fill(percentRatio);\n}\n\nexport function createLegend(min, max) {\n  const base = document.getElementById(\"map\");\n  const containerId = \"mapLegend\";\n  const container =\n    base.querySelector(`#${containerId}`) || document.createElement(\"div\");\n  container.innerHTML = \"\";\n  container.id = containerId;\n\n  const heading = document.createElement(\"span\");\n  heading.className = \"spectrum-Heading spectrum-Heading--XXXS\";\n  heading.innerHTML = \"Percent of population infected\";\n  container.appendChild(heading);\n\n  base.appendChild(container);\n  ramp(fill, 300, containerId);\n\n  // Correct value of max percent so that it's easier to parse\n  const lowestPercent = (min * 100).toFixed(8);\n  const worstPercent = (max * 100).toFixed(2);\n\n  const scaleText = document.createElement(\"span\");\n  scaleText.className = \"mapLegend-scaleLabels\";\n  const startText = document.createElement(\"span\");\n  startText.className = \"spectrum-Body spectrum-Body--XS\";\n  startText.innerHTML = `${lowestPercent}%`;\n  const endText = document.createElement(\"span\");\n  endText.className = \"spectrum-Body spectrum-Body--XS\";\n  endText.innerHTML = `${worstPercent}%`;\n  scaleText.appendChild(startText);\n  scaleText.appendChild(endText);\n  container.appendChild(scaleText);\n}\n","export const clusterLayer = {\n  id: \"clusters\",\n  type: \"fill\",\n  beforeId: \"admin-1-boundary-bg\",\n  source: \"geojson\",\n  layout: {},\n  paint: {\n    \"fill-opacity\": 0.5,\n    \"fill-color\": [\"get\", \"color\"]\n  }\n};\n","import { Paper } from \"@material-ui/core\";\nimport { first } from \"lodash\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport MapGL, { FlyToInterpolator, Layer, Source } from \"react-map-gl\";\nimport { clusterLayer } from \"./layers\";\nimport \"./Map.css\";\n\nconst Map = ({ mapData, longitude, latitude, countrySelected }) => {\n  const [viewport, setViewport] = useState({\n    latitude: 46.2276,\n    longitude: 2.2137,\n    zoom: 4\n  });\n  const [tooltip, setTooltip] = useState({\n    hoveredFeature: null,\n    x: 0,\n    y: 0\n  });\n\n  const _sourceRef = useRef();\n\n  const onViewportChange = useCallback(\n    viewport =>\n      setViewport(oldViewPort => ({\n        ...oldViewPort,\n        ...viewport\n      })),\n    [setViewport]\n  );\n\n  const goToViewport = useCallback(\n    ({ longitude, latitude }) => {\n      onViewportChange({\n        longitude,\n        latitude,\n        zoom: 4,\n        transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n        transitionDuration: \"auto\"\n      });\n    },\n    [onViewportChange]\n  );\n\n  useEffect(() => {\n    if (longitude && latitude) {\n      goToViewport({ longitude, latitude });\n    }\n  }, [longitude, latitude, goToViewport]);\n\n  const onHover = useCallback(\n    event => {\n      const {\n        features,\n        srcEvent: { offsetX, offsetY }\n      } = event;\n      const findState = (features || []).filter(\n        feature => feature.properties.state\n      );\n      const hoveredFeature =\n        findState.length > 0 ? findState[0] : first(features);\n      setTooltip({ hoveredFeature, x: offsetX, y: offsetY });\n    },\n    [setTooltip]\n  );\n\n  const onClick = useCallback(\n    event => {\n      const { features } = event;\n      const findState = (features || []).filter(\n        feature => feature.properties.state\n      );\n      const hoveredFeature =\n        findState.length > 0 ? findState[0] : first(features);\n      if (hoveredFeature) {\n        const { properties } = hoveredFeature;\n        countrySelected(properties);\n      }\n    },\n    [countrySelected]\n  );\n\n  const renderTooltip = useCallback(() => {\n    const { hoveredFeature, x, y } = tooltip;\n\n    if (hoveredFeature) {\n      let stateOrCountry = (\n        <div>\n          <b>Country</b>: {hoveredFeature.properties.name}\n        </div>\n      );\n      if (hoveredFeature.properties.state) {\n        stateOrCountry = (\n          <div>\n            <b>State</b>:{\" \"}\n            {hoveredFeature.properties.shortName ||\n              hoveredFeature.properties.county ||\n              hoveredFeature.properties.region ||\n              hoveredFeature.properties.state}\n          </div>\n        );\n      }\n      return (\n        <Paper className=\"tooltip\" style={{ left: x, top: y }}>\n          {stateOrCountry}\n          <div>\n            <b>Cases:</b> {hoveredFeature.properties.lastCases}\n          </div>\n          <div>\n            <b>Recovered:</b> {hoveredFeature.properties.lastRecovered}\n          </div>\n          <div>\n            <b>Deaths:</b> {hoveredFeature.properties.lastDeaths}\n          </div>\n          <div>\n            <b>Population affected:</b>{\" \"}\n            {hoveredFeature.properties.casePercentPopulation * 100} %\n          </div>\n\n          <div>\n            <b>Growth factor:</b> {hoveredFeature.properties.lastGrowthFactor} %\n          </div>\n          <div className=\"tooltip-click\">\n            <b>\n              <u>Click to see more statistics</u>\n            </b>\n          </div>\n        </Paper>\n      );\n    }\n\n    return false;\n  }, [tooltip]);\n\n  return (\n    <div className=\"Map\">\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/flash11/ck8gwpkts0njw1ip6l2jked9v\"\n        onViewportChange={onViewportChange}\n        mapboxApiAccessToken={process.env.REACT_APP_MapboxAccessToken}\n        interactiveLayerIds={[clusterLayer.id]}\n        onHover={onHover}\n        onClick={onClick}\n      >\n        <Source type=\"geojson\" data={mapData} ref={_sourceRef}>\n          <Layer {...clusterLayer} />\n        </Source>\n        {renderTooltip()}\n      </MapGL>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  AreaChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Area,\n  ResponsiveContainer,\n  Legend,\n  Line,\n  BarChart,\n  Bar\n} from \"recharts\";\n\nconst CustomAreaChart = ({ dates }) => {\n  const [getInitialChart, setInitialChart] = useState([]);\n  const [getDifferential, setDifferential] = useState([]);\n\n  useEffect(() => {\n    const parsedDates = JSON.parse(dates);\n    setInitialChart(\n      Object.keys(parsedDates).reduce((result, key) => {\n        result.push({\n          date: key,\n          ...parsedDates[key]\n        });\n\n        return result;\n      }, [])\n    );\n  }, [dates, setInitialChart]);\n\n  useEffect(() => {\n    const differential = getInitialChart.map((dateData, i) => {\n      if (i === 0) {\n        return dateData;\n      }\n      let cases = (dateData.cases || 0) - getInitialChart[i - 1].cases || 0;\n      let deaths = (dateData.deaths || 0) - getInitialChart[i - 1].deaths || 0;\n      if (cases < 0) {\n        cases = 0;\n      }\n      if (deaths < 0) {\n        deaths = 0;\n      }\n      return i === 0\n        ? dateData\n        : {\n            ...dateData,\n            cases,\n            deaths\n          };\n    });\n    setDifferential(differential);\n  }, [getInitialChart, setDifferential]);\n  return (\n    <React.Fragment>\n      <ResponsiveContainer width=\"100%\" height=\"50%\">\n        <AreaChart data={getInitialChart}>\n          <defs>\n            <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorDeath\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#b10e03\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#b10e03\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cases\"\n            stroke=\"#8884d8\"\n            fillOpacity={1}\n            fill=\"url(#colorConfirmed)\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"deaths\"\n            stroke=\"#b10e03\"\n            fillOpacity={1}\n            fill=\"url(#colorDeath)\"\n          />\n          <Legend verticalAlign=\"top\" height={36} />\n          <Line\n            name=\"Confirmed\"\n            type=\"monotone\"\n            dataKey=\"cases\"\n            stroke=\"#8884d8\"\n          />\n          <Line name=\"Dead\" type=\"monotone\" dataKey=\"deaths\" stroke=\"#b10e03\" />\n        </AreaChart>\n      </ResponsiveContainer>\n      <ResponsiveContainer width=\"100%\" height=\"50%\">\n        <BarChart data={getDifferential}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n\n          <Legend verticalAlign=\"top\" height={36} />\n          <Bar dataKey=\"cases\" stackId=\"a\" fill=\"green\" />\n          <Bar dataKey=\"deaths\" stackId=\"a\" fill=\"red\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n};\n\nexport default CustomAreaChart;\n","import {\n  AppBar,\n  Avatar,\n  Dialog,\n  IconButton,\n  makeStyles,\n  Slide,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport CustomAreaChart from \"../CustomAreaChart/CustomAreaChart\";\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: \"relative\"\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1\n  }\n}));\n\nconst SelectedCountryDialog = ({ selectedCountry, discardSelectedCountry }) => {\n  const Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n  const classes = useStyles();\n\n  let dialogContent = <React.Fragment></React.Fragment>;\n\n  if (selectedCountry) {\n    dialogContent = (\n      <React.Fragment>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Avatar>{selectedCountry.emoji}</Avatar>\n            <Typography variant=\"h6\" className={classes.title}>\n              {selectedCountry.name} evolution chart\n            </Typography>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={discardSelectedCountry}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <CustomAreaChart dates={selectedCountry.dates} />\n      </React.Fragment>\n    );\n  }\n  return (\n    <Dialog\n      fullScreen\n      open={!!selectedCountry}\n      onClose={discardSelectedCountry}\n      TransitionComponent={Transition}\n    >\n      {dialogContent}\n    </Dialog>\n  );\n};\n\nexport default SelectedCountryDialog;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport CounterBlockClasses from \"./CounterBlock.module.css\";\n\nconst numberWithCommas = x =>\n  x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nconst CounterBlock = ({ counter, text }) => {\n  return (\n    <div className={CounterBlockClasses.Block}>\n      <Typography variant=\"h6\">{text}</Typography>\n      <Typography variant=\"h5\" className={CounterBlockClasses.Counter}>\n        {numberWithCommas(counter)}\n      </Typography>\n    </div>\n  );\n};\n\nexport default CounterBlock;\n","import { Avatar, Grid, ListItem, ListItemText } from \"@material-ui/core\";\nimport React from \"react\";\nimport Autosizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeList } from \"react-window\";\nimport SidebarLeftListClasses from \"./SidebarLeftList.module.css\";\n\nconst SidebarListItemRenderer = ({ index, data, style }) => {\n  const { filteredCountries, setCoordinates } = data;\n  const { state, lastCases, name, emoji, coordinates } = filteredCountries[\n    index\n  ];\n  const [longitude, latitude] = coordinates || [0, 0];\n  return (\n    <ListItem\n      button\n      key={index}\n      style={style}\n      onClick={() =>\n        setCoordinates({\n          longitude,\n          latitude\n        })\n      }\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n        wrap=\"nowrap\"\n        spacing={2}\n      >\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          spacing={2}\n          alignItems=\"center\"\n          wrap=\"nowrap\"\n        >\n          <Grid item>\n            <Avatar>\n              <span className={SidebarLeftListClasses.Flag}>{emoji}</span>\n            </Avatar>\n          </Grid>\n          <Grid item>\n            <ListItemText primary={`${name}${state ? ` - ${state}` : \"\"}`} />\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ListItemText secondary={`${lastCases}`} />\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n};\n\nconst SidebarLeftList = React.memo(({ filteredCountries, setCoordinates }) => {\n  return (\n    <Autosizer>\n      {({ height, width }) => (\n        <FixedSizeList\n          height={\n            filteredCountries.length < 20\n              ? 48 * filteredCountries.length\n              : height\n          }\n          width={width}\n          itemSize={48}\n          itemCount={filteredCountries.length}\n          itemData={{\n            filteredCountries,\n            setCoordinates\n          }}\n        >\n          {SidebarListItemRenderer}\n        </FixedSizeList>\n      )}\n    </Autosizer>\n  );\n});\n\nexport default SidebarLeftList;\n","import React from \"react\";\nimport { TextField, InputAdornment } from \"@material-ui/core\";\nimport SearchRounded from \"@material-ui/icons/SearchRounded\";\n\nconst SidebarSearch = ({ search, setSearch }) => {\n  return (\n    <TextField\n      label=\"Search for a country...\"\n      variant=\"outlined\"\n      value={search}\n      onChange={event => setSearch(event.target.value)}\n      InputProps={{\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <SearchRounded />\n          </InputAdornment>\n        )\n      }}\n    />\n  );\n};\n\nexport default React.memo(SidebarSearch);\n","import { Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { sumBy } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport CounterBlock from \"../CounterBlock/CounterBlock\";\nimport SidebarLeftList from \"./SidebarLeftList/SidebarLeftList\";\nimport SidebarSearch from \"./SidebarSearch/SidebarSearch\";\n\nconst useStyles = makeStyles(theme => ({\n  Header: {\n    padding: \"15px 0\",\n    textAlign: \"center\",\n    flex: \"0 1\",\n    backgroundColor: theme.palette.background.default\n  },\n  List: {\n    paddingTop: \"8px\",\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default\n  },\n  Block: {\n    textAlign: \"center\",\n    flex: \"0 1 auto\",\n    backgroundColor: theme.palette.background.default\n  }\n}));\nconst SidebarLeft = ({ countries, setCoordinates }) => {\n  const [search, setSearch] = useState(\"\");\n  const [filteredCountries, setFilteredCases] = useState([]);\n  const classes = useStyles();\n\n  useEffect(() => {\n    setFilteredCases(\n      countries.filter(\n        filteredCountry =>\n          filteredCountry.name &&\n          filteredCountry.name.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [countries, setFilteredCases, search]);\n\n  return (\n    <React.Fragment>\n      <div className={classes.Block}>\n        <CounterBlock\n          counter={sumBy(countries, \"lastCases\")}\n          text=\"Total confirmed\"\n        ></CounterBlock>\n        <Divider />\n        <CounterBlock\n          counter={sumBy(countries, \"lastDeaths\")}\n          text=\"Total deaths\"\n        ></CounterBlock>\n        <Divider />\n      </div>\n      <div className={classes.Header}>\n        <SidebarSearch search={search} setSearch={setSearch} />\n      </div>\n      <div className={classes.List}>\n        <SidebarLeftList\n          filteredCountries={filteredCountries}\n          setCoordinates={setCoordinates}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SidebarLeft;\n","import React from \"react\";\nimport { CircularProgress, Backdrop } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\"\n  }\n}));\n\nconst Spinner = () => {\n  const classes = useStyles();\n  return (\n    <Backdrop className={classes.backdrop} open={true} onClick={() => {}}>\n      <CircularProgress size={70} />\n    </Backdrop>\n  );\n};\n\nexport default Spinner;\n","export const MapCasesActions = {\n  GET_MAP_CASES: \"[MapCases] Get map cases\",\n  GET_MAP_CASES_SUCCESS: \"[MapCases] Get map cases success\",\n  GET_MAP_CASES_FAILURE: \"[MapCases] Get map cases failure\"\n};\n\nexport const getMapCases = polygons => ({\n  type: MapCasesActions.GET_MAP_CASES,\n  polygons\n});\n\nexport const getMapCasesSuccess = countries => ({\n  type: MapCasesActions.GET_MAP_CASES_SUCCESS,\n  countries\n});\n\nexport const getMapCasesFailure = error => ({\n  type: MapCasesActions.GET_MAP_CASES_FAILURE,\n  error\n});\n","export const MapPolygonsActions = {\n  GET_MAP_POLYGONS: \"[MapPolygons] Get map polygons\",\n  GET_MAP_POLYGONS_SUCCESS: \"[MapPolygons] Get map polygons success\",\n  GET_MAP_POLYGONS_FAILURE: \"[MapPolygons] Get map polygons failure\"\n};\n\nexport const getMapPolygons = () => ({\n  type: MapPolygonsActions.GET_MAP_POLYGONS\n});\n\nexport const getMapPolygonsSuccess = polygons => ({\n  type: MapPolygonsActions.GET_MAP_POLYGONS_SUCCESS,\n  polygons\n});\n\nexport const getMapPolygonsFailure = error => ({\n  type: MapPolygonsActions.GET_MAP_POLYGONS_FAILURE,\n  error\n});\n","import { values, orderBy, keyBy } from \"lodash\";\n\nexport const selectCountriesList = state => {\n  return values(state.mapCases.countries);\n};\n\nexport const selectCountriesMapByFeatureId = state => {\n  return keyBy(selectCountriesList(state), \"featureId\");\n};\n\nexport const selectCountriesOrderedByCases = state => {\n  return orderBy(selectCountriesList(state), \"lastCases\", [\"desc\"]);\n};\n","export const selectMapPolygons = state => {\n  return state.mapPolygons.polygons;\n};\n","import { get, maxBy } from \"lodash\";\nimport { getScaledColorValue, noCasesColor } from \"./color\";\n\nexport const getPolygonData = (\n  countries,\n  countriesMapByFeatureId,\n  mapPolygons\n) => {\n  const worstCountryPercentage = get(\n    maxBy(countries, \"casePercentPopulation\"),\n    \"casePercentPopulation\"\n  );\n\n  return {\n    ...mapPolygons,\n    features: mapPolygons.features.reduce((result, feature) => {\n      let color = noCasesColor;\n      const countryForFeature = countriesMapByFeatureId[feature.properties.id];\n\n      if (\n        get(countryForFeature, \"population\") &&\n        countryForFeature.lastCases > 0\n      ) {\n        color = getScaledColorValue(\n          countryForFeature.casePercentPopulation,\n          worstCountryPercentage\n        );\n      }\n      if (countryForFeature) {\n        result.push({\n          ...feature,\n          properties: {\n            ...feature.properties,\n            ...countryForFeature,\n            color\n          }\n        });\n      }\n\n      return result;\n    }, [])\n  };\n};\n","import { CssBaseline, Drawer, Hidden } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React, { useState } from \"react\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    height: \"100%\"\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth\n    }\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\"\n    }\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    height: \"100%\"\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst Layout = ({ leftSideBar, rightSidebar, children }) => {\n  const classes = useStyles();\n\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar} color=\"default\">\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Covid 19 - World monitoring\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer}>\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            anchor=\"left\"\n            elevation={24}\n            variant=\"temporary\"\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            ModalProps={{\n              keepMounted: true // Better open performance on mobile.\n            }}\n            style={{\n              display: \"flex\"\n            }}\n          >\n            {leftSideBar}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            anchor=\"left\"\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {leftSideBar}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","import { isEmpty } from \"lodash\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Map from \"../../components/Map/Map\";\nimport SelectedCountryDialog from \"../../components/SelectedCountryDialog/SelectedCountryDialog\";\nimport SidebarLeft from \"../../components/Sidebar/SidebarLeft\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport { getMapCases } from \"../../redux/actions/mapCases.actions\";\nimport { getMapPolygons } from \"../../redux/actions/mapPolygons.actions\";\nimport {\n  selectCountriesMapByFeatureId,\n  selectCountriesOrderedByCases,\n} from \"../../redux/selectors/mapCases.selector\";\nimport { selectMapPolygons } from \"../../redux/selectors/mapPolygons.selector\";\nimport { getPolygonData } from \"../../utils/map-helper\";\nimport Layout from \"../Layout/Layout\";\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const [getCoordinates, setCoordinates] = useState({\n    longitude: 2.2137,\n    latitude: 46.2276,\n  });\n  const [getSelectedCountry, setSelectedCountry] = useState(null);\n  const [getMapData, setMapData] = useState({});\n\n  const countries = useSelector(selectCountriesOrderedByCases);\n  const mapPolygons = useSelector(selectMapPolygons);\n  const countriesMapByFeatureId = useSelector(selectCountriesMapByFeatureId);\n  const loading = useSelector((state) => state.mapCases.loading);\n\n  useEffect(() => {\n    dispatch(getMapPolygons());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!isEmpty(mapPolygons)) {\n      dispatch(getMapCases(mapPolygons));\n    }\n  }, [dispatch, mapPolygons]);\n\n  useEffect(() => {\n    if (!isEmpty(mapPolygons)) {\n      setMapData(\n        getPolygonData(countries, countriesMapByFeatureId, mapPolygons)\n      );\n    }\n  }, [countries, countriesMapByFeatureId, mapPolygons]);\n\n  const leftSideBar = (\n    <SidebarLeft\n      countries={countries.filter((country) => country.name && !country.state)}\n      setCoordinates={setCoordinates}\n    ></SidebarLeft>\n  );\n\n  const onSelectCountry = useCallback(\n    (countrySelected) => {\n      setSelectedCountry(countrySelected);\n    },\n    [setSelectedCountry]\n  );\n\n  return (\n    <React.Fragment>\n      <Layout leftSideBar={leftSideBar}>\n        {!isEmpty(getMapData) ? (\n          <Map\n            mapData={getMapData}\n            longitude={getCoordinates.longitude}\n            latitude={getCoordinates.latitude}\n            countrySelected={onSelectCountry}\n          ></Map>\n        ) : null}\n      </Layout>\n      {getSelectedCountry ? (\n        <SelectedCountryDialog\n          selectedCountry={getSelectedCountry}\n          discardSelectedCountry={() => setSelectedCountry(null)}\n        ></SelectedCountryDialog>\n      ) : null}\n      {loading ? <Spinner /> : null}\n    </React.Fragment>\n  );\n};\n\nexport default Dashboard;\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport React, { useMemo } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Dashboard from \"./containers/Dashboard/Dashboard\";\n\nfunction App() {\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: \"dark\"\n        }\n      }),\n    []\n  );\n\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <Dashboard />\n        </div>\n      </ThemeProvider>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { MapCasesActions } from \"../actions/mapCases.actions\";\n\nconst initialState = {\n  countries: [],\n  error: null,\n  loading: false\n};\n\nexport function mapCasesReducer(state = initialState, action) {\n  switch (action.type) {\n    case MapCasesActions.GET_MAP_CASES:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case MapCasesActions.GET_MAP_CASES_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        countries: action.countries\n      };\n    case MapCasesActions.GET_MAP_CASES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    default:\n      return state;\n  }\n}\n","import { MapPolygonsActions } from \"../actions/mapPolygons.actions\";\n\nconst initialState = {\n  polygons: [],\n  error: null,\n  loading: false\n};\n\nexport function mapPolygonsReducer(state = initialState, action) {\n  switch (action.type) {\n    case MapPolygonsActions.GET_MAP_POLYGONS:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case MapPolygonsActions.GET_MAP_POLYGONS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        polygons: action.polygons\n      };\n    case MapPolygonsActions.GET_MAP_POLYGONS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    default:\n      return state;\n  }\n}\n","import { countries } from \"country-data\";\nimport { get, keys, sortBy } from \"lodash\";\nimport { put } from \"redux-saga/effects\";\nimport {\n  getMapCasesFailure,\n  getMapCasesSuccess,\n} from \"../actions/mapCases.actions\";\n\nexport function* getMapCasesSaga() {\n  try {\n    const response = yield fetch(\n      \"https://coronadatascraper.com/timeseries-byLocation.json\"\n    );\n    const data = yield response.json();\n    const result = yield Object.keys(data).reduce((result, key) => {\n      let { coordinates, dates, countryId, population } = data[key];\n      const iso1 = countryId.split(\":\")[1];\n      const name = get(countries[iso1], \"name\");\n      const emoji = get(countries[iso1], \"emoji\");\n      let lastGrowthFactor = 100;\n      let lastCases = 0;\n      let lastDeaths = 0;\n      let lastTested = 0;\n      let lastRecovered = 0;\n\n      let dateKeyArray = sortBy(keys(dates), (dateObj) => {\n        return new Date(dateObj);\n      });\n\n      dateKeyArray.forEach((key) => {\n        const date = dates[key];\n        if (get(date, \"tested\")) {\n          lastTested = date.tested;\n        }\n        if (get(date, \"growthFactor\")) {\n          lastGrowthFactor = date.growthFactor;\n        }\n        if (get(date, \"cases\")) {\n          lastCases = date.cases;\n        }\n        if (get(date, \"deaths\")) {\n          lastDeaths = date.deaths;\n        }\n        if (get(date, \"recovered\")) {\n          lastRecovered = date.recovered;\n        }\n      });\n\n      if (lastGrowthFactor) {\n        lastGrowthFactor = +(lastGrowthFactor * 100).toFixed(0);\n      }\n\n      const casePercentPopulation = (population\n        ? lastCases / population\n        : 0\n      ).toFixed(4);\n      result[key] = {\n        ...data[key],\n        name,\n        emoji,\n        lastCases,\n        lastDeaths,\n        lastTested,\n        lastGrowthFactor,\n        lastRecovered,\n        casePercentPopulation,\n        coordinates,\n      };\n      return result;\n    }, {});\n\n    yield put(getMapCasesSuccess(result));\n  } catch (error) {\n    yield put(getMapCasesFailure(error.message));\n  }\n}\n","import { put } from \"redux-saga/effects\";\nimport {\n  getMapPolygonsFailure,\n  getMapPolygonsSuccess\n} from \"../actions/mapPolygons.actions\";\n\nexport function* getMapPolygonsSaga() {\n  try {\n    const response = yield fetch(\"https://coronadatascraper.com/features.json\");\n    const data = yield response.json();\n\n    yield put(getMapPolygonsSuccess(data));\n  } catch (error) {\n    yield put(getMapPolygonsFailure(error.message));\n  }\n}\n","import { all, takeEvery } from \"redux-saga/effects\";\nimport { MapCasesActions } from \"../actions/mapCases.actions\";\nimport { getMapCasesSaga } from \"./mapCases.saga\";\nimport { MapPolygonsActions } from \"../actions/mapPolygons.actions\";\nimport { getMapPolygonsSaga } from \"./mapPolygons.saga\";\n\nexport function* watchMapCases() {\n  yield all([takeEvery(MapCasesActions.GET_MAP_CASES, getMapCasesSaga)]);\n}\n\nexport function* watchMapPolygons() {\n  yield all([\n    takeEvery(MapPolygonsActions.GET_MAP_POLYGONS, getMapPolygonsSaga)\n  ]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { mapCasesReducer } from \"./redux/reducers/mapCases.reducer\";\nimport { mapPolygonsReducer } from \"./redux/reducers/mapPolygons.reducer\";\nimport { watchMapCases, watchMapPolygons } from \"./redux/sagas\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = applyMiddleware(thunk, sagaMiddleware);\nconst enhancers =\n  process.env.NODE_ENV === \"development\" ? middlewares : middlewares;\n\nconst store = createStore(\n  combineReducers({\n    mapCases: mapCasesReducer,\n    mapPolygons: mapPolygonsReducer,\n  }),\n  enhancers\n);\n\nsagaMiddleware.run(watchMapCases);\nsagaMiddleware.run(watchMapPolygons);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}